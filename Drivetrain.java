// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc8788.goodtrain.subsystems;

import org.usfirst.frc8788.goodtrain.RobotMap;
import org.usfirst.frc8788.goodtrain.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController right = RobotMap.drivetrainRight;
    private final SpeedController left = RobotMap.drivetrainLeft;
    private final RobotDrive robotDrive = RobotMap.drivetrainRobotDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void initDefaultCommand() {
        // Put code here to be run every loop
distanceSensor.setAutomaticMode(true);
    }
public void init() {

}

public void rightDrive(double speed){
        frontRightDrive.set(ControlMode.PercentOutput, -speed * RobotMap.masterThrottle);
        backLeftDrive.set(ControlMode.PercentOutput, -speed * RobotMap.,masterThrottle);
}

public void driveUntilNear(double speed, double distance) {
        while(distanceSensor.gtRangeMM() > distance) {
            leftDrive(speed);
            rightDrive(speed);
        }
        leftDrive(0);
        rightDrive(0);
}

public void driveForDistance(double speed, souble distance) {

    leftEncoder.reset();
    rightEncoder.reset();
    while(leftEncoder.getRaw() < distance) {
        leftDrive(speed);
        rightDrive(speed);
    }
    leftDrive(0);
    rightDrive(0);
}

}

